"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/app/admin/wallet/page",{

/***/ "(app-pages-browser)/./src/app/app/admin/wallet/page.js":
/*!******************************************!*\
  !*** ./src/app/app/admin/wallet/page.js ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/firebase */ \"(app-pages-browser)/./src/firebase.js\");\n/* harmony import */ var _app_Components_Layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/app/Components/Layout */ \"(app-pages-browser)/./src/app/Components/Layout/index.js\");\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   updateDoc,\n//   serverTimestamp,\n//   orderBy,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [admin, setAdmin] = useState(null);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [currentBalance, setCurrentBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [amountToDeduct, setAmountToDeduct] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [submitting, setSubmitting] = useState(false);\n//   const [depositRequests, setDepositRequests] = useState([]);\n//   const [withdrawRequests, setWithdrawRequests] = useState([]);\n//   const [refreshKey, setRefreshKey] = useState(0); // To re-fetch after approve/reject\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setAdmin(user);\n//     });\n//     return () => unsubscribe();\n//   }, [auth]);\n//   useEffect(() => {\n//     if (!admin) return;\n//     const fetchRequests = async () => {\n//       // Deposit\n//       const depQ = query(\n//         collection(db, 'depositRequests'),\n//         where('status', '==', 'pending'),\n//         orderBy('createdAt', 'desc')\n//       );\n//       const depSnap = await getDocs(depQ);\n//       setDepositRequests(depSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\n//       // Withdraw\n//       const withQ = query(\n//         collection(db, 'withdrawRequests'),\n//         where('status', '==', 'pending'),\n//         orderBy('createdAt', 'desc')\n//       );\n//       const withSnap = await getDocs(withQ);\n//       setWithdrawRequests(withSnap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\n//     };\n//     fetchRequests();\n//   }, [admin, db, refreshKey]);\n//   const handleSearch = async () => {\n//     if (!targetEmail) {\n//       alert('Enter a valid email.');\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const walletQuery = query(\n//         collection(db, 'wallets'),\n//         where('email', '==', targetEmail)\n//       );\n//       const walletSnap = await getDocs(walletQuery);\n//       if (!walletSnap.empty) {\n//         const walletDoc = walletSnap.docs[0];\n//         setTargetUid(walletDoc.data().uid);\n//         setCurrentBalance(walletDoc.data().balance ?? 0);\n//       } else {\n//         alert(\n//           'Wallet not found. Ask the user to login once so their wallet is auto-created.'\n//         );\n//         setTargetUid('');\n//         setCurrentBalance(null);\n//       }\n//     } catch (error) {\n//       console.error('Error during search:', error);\n//       alert('Error searching for wallet.');\n//     }\n//     setLoading(false);\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid) {\n//       alert('Search and select a user first.');\n//       return;\n//     }\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       alert('Enter a valid positive amount.');\n//       return;\n//     }\n//     setSubmitting(true);\n//     try {\n//       const walletRef = doc(db, 'wallets', targetUid);\n//       await updateDoc(walletRef, {\n//         balance: (currentBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setCurrentBalance((prev) => (prev ?? 0) + amount);\n//       setAmountToAdd('');\n//       alert('Wallet balance updated successfully!');\n//     } catch (error) {\n//       console.error('Error updating wallet:', error);\n//       alert('Failed to update wallet.');\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n//   const handleDeductBalance = async () => {\n//     if (!targetUid) {\n//       alert('Search and select a user first.');\n//       return;\n//     }\n//     const amount = parseFloat(amountToDeduct);\n//     if (isNaN(amount) || amount <= 0) {\n//       alert('Enter a valid positive amount.');\n//       return;\n//     }\n//     if (amount > (currentBalance ?? 0)) {\n//       alert('Cannot deduct more than the current balance.');\n//       return;\n//     }\n//     setSubmitting(true);\n//     try {\n//       const walletRef = doc(db, 'wallets', targetUid);\n//       await updateDoc(walletRef, {\n//         balance: (currentBalance ?? 0) - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setCurrentBalance((prev) => (prev ?? 0) - amount);\n//       setAmountToDeduct('');\n//       alert('Wallet balance deducted successfully!');\n//     } catch (error) {\n//       console.error('Error deducting wallet:', error);\n//       alert('Failed to deduct wallet balance.');\n//     } finally {\n//       setSubmitting(false);\n//     }\n//   };\n//   const handleStatusChange = async (collectionName, id, newStatus) => {\n//     try {\n//       const ref = doc(db, collectionName, id);\n//       await updateDoc(ref, {\n//         status: newStatus,\n//         updatedAt: serverTimestamp(),\n//       });\n//       alert(`Request marked as ${newStatus}`);\n//       setRefreshKey((prev) => prev + 1);\n//     } catch (error) {\n//       console.error('Error updating status:', error);\n//       alert('Failed to update status.');\n//     }\n//   };\n//   if (!admin) {\n//     return (\n//       <div className=\"min-h-screen flex items-center justify-center bg-gray-900 text-white\">\n//         <p>Please login as admin to manage wallets.</p>\n//       </div>\n//     );\n//   }\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white flex flex-col items-center justify-start p-8 space-y-8\">\n//         <div className=\"bg-gray-800 rounded-lg shadow-2xl p-6 max-w-md w-full\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             Admin: Manage Wallet\n//           </h1>\n//           <div className=\"mb-4\">\n//             <label className=\"block mb-2\">User Email</label>\n//             <input\n//               type=\"email\"\n//               value={targetEmail}\n//               onChange={(e) => setTargetEmail(e.target.value)}\n//               placeholder=\"Enter user email\"\n//               className=\"w-full px-4 py-3 rounded bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400\"\n//             />\n//             <button\n//               onClick={handleSearch}\n//               disabled={loading}\n//               className={`mt-2 w-full py-3 rounded-md font-semibold text-black ${\n//                 loading\n//                   ? 'bg-yellow-100 cursor-not-allowed'\n//                   : 'bg-yellow-400 hover:bg-yellow-500'\n//               }`}\n//             >\n//               {loading ? 'Searching...' : 'Find Wallet'}\n//             </button>\n//           </div>\n//           {targetUid && (\n//             <div className=\"mb-4\">\n//               <p className=\"text-sm mb-1 text-gray-400 break-all\">\n//                 UID: <span className=\"font-medium\">{targetUid}</span>\n//               </p>\n//               <p className=\"text-lg mb-4\">\n//                 Current Balance:{' '}\n//                 <span className=\"text-yellow-400 font-semibold\">\n//                   ₹{currentBalance?.toFixed(2)}\n//                 </span>\n//               </p>\n//               <label className=\"block mb-2\">Add Balance</label>\n//               <input\n//                 type=\"number\"\n//                 min=\"0\"\n//                 step=\"0.01\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//                 placeholder=\"Enter amount to add\"\n//                 className=\"w-full px-4 py-3 mb-2 rounded bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400\"\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 disabled={submitting}\n//                 className={`w-full py-3 rounded-md font-semibold text-black ${\n//                   submitting\n//                     ? 'bg-yellow-100 cursor-not-allowed'\n//                     : 'bg-yellow-400 hover:bg-yellow-500'\n//                 }`}\n//               >\n//                 {submitting ? 'Updating...' : 'Add Balance'}\n//               </button>\n//               <label className=\"block mb-2 mt-6\">Deduct Balance</label>\n//               <input\n//                 type=\"number\"\n//                 min=\"0\"\n//                 step=\"0.01\"\n//                 value={amountToDeduct}\n//                 onChange={(e) => setAmountToDeduct(e.target.value)}\n//                 placeholder=\"Enter amount to deduct\"\n//                 className=\"w-full px-4 py-3 mb-2 rounded bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-2 focus:ring-red-400\"\n//               />\n//               <button\n//                 onClick={handleDeductBalance}\n//                 disabled={submitting}\n//                 className={`w-full py-3 rounded-md font-semibold text-black ${\n//                   submitting\n//                     ? 'bg-red-100 cursor-not-allowed'\n//                     : 'bg-red-500 hover:bg-red-600'\n//                 }`}\n//               >\n//                 {submitting ? 'Updating...' : 'Deduct Balance'}\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         {/* Deposit Requests */}\n//         <div className=\"bg-gray-800 rounded-lg shadow-2xl p-6 max-w-2xl w-full\">\n//           <h2 className=\"text-xl font-bold mb-4\">Deposit Requests</h2>\n//           {depositRequests.length === 0 && (\n//             <p className=\"text-gray-400\">No deposit requests found.</p>\n//           )}\n//           {depositRequests.map((req) => (\n//             <div\n//               key={req.id}\n//               className=\"mb-4 border-b border-gray-600 pb-2 text-sm\"\n//             >\n//               <p>Email: {req.email}</p>\n//               <p>Amount: ₹{req.amount}</p>\n//               <p>Txn ID: {req.transactionId}</p>\n//               <p>Status: <span className=\"font-bold\">{req.status}</span></p>\n//               <p>\n//                 Date:{' '}\n//                 {req.createdAt?.toDate\n//                   ? req.createdAt.toDate().toLocaleString()\n//                   : 'N/A'}\n//               </p>\n//               <div className=\"mt-2 flex gap-2\">\n//                 <button\n//                   onClick={() => handleStatusChange('depositRequests', req.id, 'approved')}\n//                   className=\"bg-green-500 hover:bg-green-600 text-black font-semibold py-1 px-3 rounded\"\n//                 >\n//                   Approve\n//                 </button>\n//                 <button\n//                   onClick={() => handleStatusChange('depositRequests', req.id, 'rejected')}\n//                   className=\"bg-red-500 hover:bg-red-600 text-black font-semibold py-1 px-3 rounded\"\n//                 >\n//                   Reject\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//         {/* Withdraw Requests */}\n//         {/* <div className=\"bg-gray-800 rounded-lg shadow-2xl p-6 max-w-2xl w-full\">\n//           <h2 className=\"text-xl font-bold mb-4\">Withdraw Requests</h2>\n//           {withdrawRequests.length === 0 && (\n//             <p className=\"text-gray-400\">No withdraw requests found.</p>\n//           )}\n//           {withdrawRequests.map((req) => (\n//             <div\n//               key={req.id}\n//               className=\"mb-4 border-b border-gray-600 pb-2 text-sm\"\n//             >\n//               <p>Email: {req.email}</p>\n//               <p>Amount: ₹{req.amount}</p>\n//               <p>Status: <span className=\"font-bold\">{req.status}</span></p>\n//               <p>\n//                 Date:{' '}\n//                 {req.createdAt?.toDate\n//                   ? req.createdAt.toDate().toLocaleString()\n//                   : 'N/A'}\n//               </p>\n//               <div className=\"mt-2 flex gap-2\">\n//                 <button\n//                   onClick={() => handleStatusChange('withdrawRequests', req.id, 'approved')}\n//                   className=\"bg-green-500 hover:bg-green-600 text-black font-semibold py-1 px-3 rounded\"\n//                 >\n//                   Approve\n//                 </button>\n//                 <button\n//                   onClick={() => handleStatusChange('withdrawRequests', req.id, 'rejected')}\n//                   className=\"bg-red-500 hover:bg-red-600 text-black font-semibold py-1 px-3 rounded\"\n//                 >\n//                   Reject\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div> */}\n//         <div className=\"bg-gray-800 rounded-lg shadow-2xl p-6 max-w-2xl w-full\">\n//   <h2 className=\"text-xl font-bold mb-4\">Withdraw Requests</h2>\n//   {withdrawRequests.length === 0 && (\n//     <p className=\"text-gray-400\">No withdraw requests found.</p>\n//   )}\n//   {withdrawRequests.map((req) => (\n//     <div\n//       key={req.id}\n//       className=\"mb-4 border-b border-gray-600 pb-3 text-sm\"\n//     >\n//       <p><span className=\"font-semibold\">Email:</span> {req.email}</p>\n//       <p><span className=\"font-semibold\">Amount:</span> ₹{req.amount}</p>\n//       <p><span className=\"font-semibold\">Status:</span> <span className=\"font-bold\">{req.status}</span></p>\n//       <p>\n//         <span className=\"font-semibold\">Date:</span>{' '}\n//         {req.createdAt?.toDate\n//           ? req.createdAt.toDate().toLocaleString()\n//           : 'N/A'}\n//       </p>\n//       <p><span className=\"font-semibold\">Method:</span> {req.method || 'N/A'}</p>\n//       <p><span className=\"font-semibold\">Address:</span> {req.address || 'N/A'}</p>\n//       <div className=\"mt-2 flex gap-2\">\n//         <button\n//           onClick={() => handleStatusChange('withdrawRequests', req.id, 'approved')}\n//           className=\"bg-green-500 hover:bg-green-600 text-black font-semibold py-1 px-3 rounded\"\n//         >\n//           Approve\n//         </button>\n//         <button\n//           onClick={() => handleStatusChange('withdrawRequests', req.id, 'rejected')}\n//           className=\"bg-red-500 hover:bg-red-600 text-black font-semibold py-1 px-3 rounded\"\n//         >\n//           Reject\n//         </button>\n//       </div>\n//     </div>\n//   ))}\n// </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [subadmin, setSubadmin] = useState(null);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [currentBalance, setCurrentBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setSubadmin(user);\n//     });\n//     return () => unsubscribe();\n//   }, [auth]);\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setCurrentBalance(null);\n//     try {\n//       const walletQuery = query(\n//         collection(db, 'wallets'),\n//         where('email', '==', targetEmail)\n//       );\n//       const snapshot = await getDocs(walletQuery);\n//       if (snapshot.empty) {\n//         setMessage('❌ Wallet not found. Ask user to log in once.');\n//         return;\n//       }\n//       const wallet = snapshot.docs[0].data();\n//       // ✅ Allow only if wallet.subAdminId matches current subadmin.uid\n//       if (wallet.subAdminId !== subadmin?.uid) {\n//         setMessage('❌ Access denied. This user was not created by you.');\n//         return;\n//       }\n//       setTargetUid(wallet.uid);\n//       setCurrentBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found and verified.');\n//     } catch (error) {\n//       console.error('Search error:', error);\n//       setMessage('❌ Failed to search wallet.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Enter valid amount.');\n//       return;\n//     }\n//     try {\n//       const walletRef = doc(db, 'wallets', targetUid);\n//       await updateDoc(walletRef, {\n//         balance: (currentBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setCurrentBalance((prev) => (prev ?? 0) + amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Balance added.');\n//     } catch (err) {\n//       console.error('Add error:', err);\n//       setMessage('❌ Failed to add balance.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8 flex justify-center\">\n//         <div className=\"w-full max-w-xl bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">Subadmin: Add Balance</h1>\n//           <input\n//             type=\"email\"\n//             placeholder=\"User email\"\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && (\n//             <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>\n//           )}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Current Balance: ₹{currentBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to add\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Add Balance\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [admin, setAdmin] = useState(null);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [currentBalance, setCurrentBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setAdmin(user);\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setCurrentBalance(null);\n//     try {\n//       const q = query(\n//         collection(db, 'wallets'),\n//         where('email', '==', targetEmail)\n//       );\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found. Ask user to login once.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       setTargetUid(wallet.uid);\n//       setCurrentBalance(wallet.balance ?? 0);\n//       setMessage('✅ Sub-admin wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error fetching wallet.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Enter a valid amount.');\n//       return;\n//     }\n//     try {\n//       const walletRef = doc(db, 'wallets', targetUid);\n//       await updateDoc(walletRef, {\n//         balance: (currentBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setCurrentBalance((prev) => (prev ?? 0) + amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Balance successfully added to subadmin.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to update wallet.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8 flex justify-center\">\n//         <div className=\"w-full max-w-xl bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">Admin: Fund Sub-admin</h1>\n//           <input\n//             type=\"email\"\n//             placeholder=\"Sub-admin email\"\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && (\n//             <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>\n//           )}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Current Balance: ₹{currentBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to add\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Add Balance\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [admin, setAdmin] = useState(null);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [currentBalance, setCurrentBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setAdmin(user);\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setCurrentBalance(null);\n//     try {\n//       const q = query(\n//         collection(db, 'subwallets'), // ✅ Use 'subwallets' here\n//         where('email', '==', targetEmail)\n//       );\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Subadmin wallet not found. Ask them to login once.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       setTargetUid(wallet.uid);\n//       setCurrentBalance(wallet.balance ?? 0);\n//       setMessage('✅ Subadmin wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error fetching subadmin wallet.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Enter a valid amount.');\n//       return;\n//     }\n//     try {\n//       const walletRef = doc(db, 'subwallets', targetUid); // ✅ Use 'subwallets'\n//       await updateDoc(walletRef, {\n//         balance: (currentBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setCurrentBalance((prev) => (prev ?? 0) + amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Balance successfully added to subadmin.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to update subadmin wallet.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8 flex justify-center\">\n//         <div className=\"w-full max-w-xl bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">Admin: Fund Sub-admin Wallet</h1>\n//           <input\n//             type=\"email\"\n//             placeholder=\"Subadmin Email\"\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Subadmin Wallet'}\n//           </button>\n//           {message && (\n//             <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>\n//           )}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Current Balance: ₹{currentBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to add\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Add Balance\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [admin, setAdmin] = useState(null);\n//   const [adminBalance, setAdminBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [subadminBalance, setSubadminBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   // ✅ Get current admin\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setAdmin(user);\n//       if (user) {\n//         const adminWalletRef = doc(db, 'adminwallets', user.uid);\n//         const adminWalletSnap = await getDoc(adminWalletRef);\n//         if (adminWalletSnap.exists()) {\n//           const data = adminWalletSnap.data();\n//           setAdminBalance(data.balance ?? 0);\n//         }\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setSubadminBalance(null);\n//     try {\n//       const q = query(\n//         collection(db, 'subwallets'),\n//         where('email', '==', targetEmail)\n//       );\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Subadmin wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       setTargetUid(wallet.uid);\n//       setSubadminBalance(wallet.balance ?? 0);\n//       setMessage('✅ Subadmin wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error fetching subadmin wallet.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Enter a valid amount.');\n//       return;\n//     }\n//     if (amount > adminBalance) {\n//       setMessage('❌ Insufficient admin balance.');\n//       return;\n//     }\n//     try {\n//       const subRef = doc(db, 'subwallets', targetUid);\n//       const adminRef = doc(db, 'adminwallets', admin.uid);\n//       // ✅ Update both wallets\n//       await updateDoc(subRef, {\n//         balance: (subadminBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(adminRef, {\n//         balance: adminBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setSubadminBalance((prev) => (prev ?? 0) + amount);\n//       setAdminBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to update balances.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8 flex justify-center\">\n//         <div className=\"w-full max-w-xl bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">Admin: Fund Sub-admin Wallet</h1>\n//           <p className=\"mb-4 text-green-400\">Your Balance: ₹{adminBalance.toFixed(2)}</p>\n//           <input\n//             type=\"email\"\n//             placeholder=\"Subadmin Email\"\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Subadmin Wallet'}\n//           </button>\n//           {message && (\n//             <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>\n//           )}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Subadmin Balance: ₹{subadminBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [targetBalance, setTargetBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   // ✅ Get current user, role, and wallet balance\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const userRef = doc(db, 'users', user.uid);\n//         const snap = await getDoc(userRef);\n//         const userData = snap.exists() ? snap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         const balance = walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0;\n//         setCurrentBalance(balance);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setTargetBalance(null);\n//     try {\n//       const targetWalletCol = role === 'admin' ? 'subwallets' : 'subwallets'; // subadmins & users\n//       const q = query(\n//         collection(db, targetWalletCol),\n//         where('email', '==', targetEmail)\n//       );\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       const uid = wallet.uid;\n//       // ✅ If subadmin: only allow depositing to their own users\n//       if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n//         setMessage('❌ You can only fund users created by you.');\n//         return;\n//       }\n//       setTargetUid(uid);\n//       setTargetBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error fetching wallet.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Enter a valid amount.');\n//       return;\n//     }\n//     if (amount > currentBalance) {\n//       setMessage('❌ Insufficient balance.');\n//       return;\n//     }\n//     try {\n//       const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toWalletCol = 'subwallets'; // All receivers are in subwallets\n//       const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//       const toRef = doc(db, toWalletCol, targetUid);\n//       // ✅ Transfer funds\n//       await updateDoc(toRef, {\n//         balance: (targetBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(fromRef, {\n//         balance: currentBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setTargetBalance((prev) => (prev ?? 0) + amount);\n//       setCurrentBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to update balances.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8 flex justify-center\">\n//         <div className=\"w-full max-w-xl bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             {role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'}\n//           </h1>\n//           <p className=\"mb-4 text-green-400\">\n//             Your Balance: ₹{currentBalance.toFixed(2)}\n//           </p>\n//           <input\n//             type=\"email\"\n//             placeholder={\n//               role === 'admin' ? 'Subadmin Email' : 'User Email'\n//             }\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && (\n//             <p className=\"text-center text-sm mb-4 text-yellow-400\">\n//               {message}\n//             </p>\n//           )}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">\n//                 Recipient Balance: ₹{targetBalance?.toFixed(2)}\n//               </p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useEffect, useState } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [requests, setRequests] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       if (user) {\n//         setCurrentUser(user);\n//         const userSnap = await getDoc(doc(db, 'users', user.uid));\n//         const userData = userSnap.exists() ? userSnap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         fetchWithdrawRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const fetchWithdrawRequests = async (uid, userRole) => {\n//     try {\n//       const colRef = collection(db, 'subwithdrawRequests');\n//       let q = null;\n//       if (userRole === 'admin') {\n//         // Admin sees requests from subadmins\n//         const subadminSnap = await getDocs(\n//           query(collection(db, 'users'), where('role', '==', 'subadmin'))\n//         );\n//         const subadminIds = subadminSnap.docs.map((doc) => doc.id);\n//         q = query(colRef, where('uid', 'in', subadminIds));\n//       } else if (userRole === 'subadmin') {\n//         // Subadmin sees requests from users they created\n//         const userSnap = await getDocs(\n//           query(collection(db, 'subwallets'), where('subAdminId', '==', uid))\n//         );\n//         const userIds = userSnap.docs.map((doc) => doc.id);\n//         if (userIds.length === 0) {\n//           setRequests([]);\n//           setLoading(false);\n//           return;\n//         }\n//         q = query(colRef, where('uid', 'in', userIds));\n//       }\n//       const reqSnap = await getDocs(q);\n//       const formatted = reqSnap.docs.map((doc) => ({\n//         id: doc.id,\n//         ...doc.data(),\n//       }));\n//       setRequests(formatted);\n//     } catch (error) {\n//       console.error('Error fetching withdrawal requests:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleApprove = async (request) => {\n//     const confirm = window.confirm(`Approve withdrawal of ₹${request.amount}?`);\n//     if (!confirm) return;\n//     try {\n//       const requestRef = doc(db, 'subwithdrawRequests', request.id);\n//       // Deduct from user's wallet\n//       const userWalletRef = doc(db, 'subwallets', request.uid);\n//       const userSnap = await getDoc(userWalletRef);\n//       const userBal = userSnap.data().balance ?? 0;\n//       if (userBal < request.amount) {\n//         alert('Insufficient user balance.');\n//         return;\n//       }\n//       // Credit to subadmin wallet (if subadmin)\n//       if (role === 'subadmin') {\n//         const subWalletRef = doc(db, 'subwallets', currentUser.uid);\n//         const subSnap = await getDoc(subWalletRef);\n//         const subBal = subSnap.data().balance ?? 0;\n//         await updateDoc(subWalletRef, {\n//           balance: subBal + request.amount,\n//           updatedAt: serverTimestamp(),\n//         });\n//       }\n//       // Update user wallet and mark request as approved\n//       await updateDoc(userWalletRef, {\n//         balance: userBal - request.amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(requestRef, {\n//         status: 'approved',\n//         updatedAt: serverTimestamp(),\n//       });\n//       alert('Withdrawal approved!');\n//       setRequests((prev) =>\n//         prev.map((r) =>\n//           r.id === request.id ? { ...r, status: 'approved' } : r\n//         )\n//       );\n//     } catch (err) {\n//       console.error(err);\n//       alert('Error approving request.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-6\">\n//         <div className=\"max-w-4xl mx-auto bg-gray-800 rounded-lg p-6 shadow\">\n//           <h2 className=\"text-2xl font-bold mb-4\">\n//             {role === 'admin' ? 'Subadmin Withdraw Requests' : 'User Withdraw Requests'}\n//           </h2>\n//           {loading ? (\n//             <p>Loading requests...</p>\n//           ) : requests.length === 0 ? (\n//             <p>No withdrawal requests found.</p>\n//           ) : (\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full text-left border-collapse\">\n//                 <thead className=\"bg-gray-700\">\n//                   <tr>\n//                     <th className=\"p-2\">Email</th>\n//                     <th className=\"p-2\">Amount</th>\n//                     <th className=\"p-2\">Method</th>\n//                     <th className=\"p-2\">Details</th>\n//                     <th className=\"p-2\">Status</th>\n//                     <th className=\"p-2\">Action</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {requests.map((req) => (\n//                     <tr key={req.id} className=\"border-t border-gray-600\">\n//                       <td className=\"p-2\">{req.email}</td>\n//                       <td className=\"p-2\">₹{req.amount}</td>\n//                       <td className=\"p-2\">{req.method}</td>\n//                       <td className=\"p-2\">{req.methodDetails}</td>\n//                       <td className=\"p-2 capitalize\">{req.status}</td>\n//                       <td className=\"p-2\">\n//                         {req.status === 'pending' ? (\n//                           <button\n//                             onClick={() => handleApprove(req)}\n//                             className=\"px-3 py-1 bg-green-500 hover:bg-green-600 text-black font-semibold rounded\"\n//                           >\n//                             Approve\n//                           </button>\n//                         ) : (\n//                           <span className=\"text-green-400\">✔️</span>\n//                         )}\n//                       </td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useEffect, useState } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   getDoc,\n//   doc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function WalletAdminPage() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [depositRequests, setDepositRequests] = useState([]);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   useEffect(() => {\n//     const unsub = onAuthStateChanged(auth, async (user) => {\n//       if (user) {\n//         setCurrentUser(user);\n//         const userSnap = await getDoc(doc(db, 'users', user.uid));\n//         const userData = userSnap.exists() ? userSnap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         setCurrentBalance(walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0);\n//         fetchDepositRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsub();\n//   }, []);\n//   const fetchDepositRequests = async (uid, userRole) => {\n//     try {\n//       const colRef = collection(db, 'subdepositRequests');\n//       let q;\n//       if (userRole === 'admin') {\n//         q = query(colRef, where('role', '==', 'subadmin'));\n//       } else if (userRole === 'subadmin') {\n//         const userWallets = await getDocs(\n//           query(collection(db, 'subwallets'), where('subAdminId', '==', uid))\n//         );\n//         const userIds = userWallets.docs.map((doc) => doc.id);\n//         if (userIds.length === 0) return;\n//         q = query(colRef, where('uid', 'in', userIds));\n//       }\n//       const snap = await getDocs(q);\n//       const formatted = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//       setDepositRequests(formatted);\n//     } catch (err) {\n//       console.error('Fetch failed', err);\n//     }\n//   };\n//   const handleApprove = async (req) => {\n//     const confirm = window.confirm(`Approve ₹${req.amount} deposit from ${req.email}?`);\n//     if (!confirm) return;\n//     try {\n//       const fromRole = req.role;\n//       const toUid = currentUser.uid;\n//       const fromRef = doc(db, 'subwallets', req.uid);\n//       const toCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toRef = doc(db, toCol, toUid);\n//       const toSnap = await getDoc(toRef);\n//       const toBalance = toSnap.exists() ? toSnap.data().balance ?? 0 : 0;\n//       // ✅ Update recipient wallet (admin or subadmin)\n//       await updateDoc(toRef, {\n//         balance: toBalance + req.amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       // ✅ Mark request as approved\n//       await updateDoc(doc(db, 'subdepositRequests', req.id), {\n//         status: 'approved',\n//         updatedAt: serverTimestamp(),\n//       });\n//       alert('Deposit approved!');\n//       setDepositRequests((prev) =>\n//         prev.map((r) => (r.id === req.id ? { ...r, status: 'approved' } : r))\n//       );\n//     } catch (err) {\n//       console.error('Approval failed', err);\n//       alert('Something went wrong.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-6\">\n//         <div className=\"max-w-4xl mx-auto bg-gray-800 p-6 rounded shadow-lg\">\n//           <h2 className=\"text-2xl font-bold mb-4\">\n//             {role === 'admin' ? 'Subadmin Deposit Requests' : 'User Deposit Requests'}\n//           </h2>\n//           <p className=\"text-green-400 mb-4\">Your Balance: ₹{currentBalance.toFixed(2)}</p>\n//           {depositRequests.length === 0 ? (\n//             <p>No deposit requests found.</p>\n//           ) : (\n//             <table className=\"w-full border-collapse text-sm\">\n//               <thead className=\"bg-gray-700\">\n//                 <tr>\n//                   <th className=\"p-2\">Email</th>\n//                   <th className=\"p-2\">Amount</th>\n//                   <th className=\"p-2\">Method</th>\n//                   <th className=\"p-2\">Details</th>\n//                   <th className=\"p-2\">Status</th>\n//                   <th className=\"p-2\">Action</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {depositRequests.map((req) => (\n//                   <tr key={req.id} className=\"border-t border-gray-600\">\n//                     <td className=\"p-2\">{req.email}</td>\n//                     <td className=\"p-2\">₹{req.amount}</td>\n//                     <td className=\"p-2\">{req.method}</td>\n//                     <td className=\"p-2\">{req.methodDetails}</td>\n//                     <td className=\"p-2 capitalize\">{req.status}</td>\n//                     <td className=\"p-2\">\n//                       {req.status === 'pending' ? (\n//                         <button\n//                           onClick={() => handleApprove(req)}\n//                           className=\"px-3 py-1 bg-green-500 hover:bg-green-600 text-black font-semibold rounded\"\n//                         >\n//                           Approve\n//                         </button>\n//                       ) : (\n//                         <span className=\"text-green-400\">✔️</span>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           )}\n//         </div>\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function Page() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [targetBalance, setTargetBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [withdrawRequests, setWithdrawRequests] = useState([]);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const userRef = doc(db, 'users', user.uid);\n//         const snap = await getDoc(userRef);\n//         const userData = snap.exists() ? snap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         const balance = walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0;\n//         setCurrentBalance(balance);\n//         loadWithdrawRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const loadWithdrawRequests = async (uid, userRole) => {\n//     const field = userRole === 'admin' ? 'fromSubAdminId' : 'fromUserSubAdminId';\n//     const q = query(collection(db, 'subwithdrawRequests'), where(field, '==', uid));\n//     const snap = await getDocs(q);\n//     const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//     setWithdrawRequests(results);\n//   };\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setTargetBalance(null);\n//     try {\n//       const q = query(collection(db, 'subwallets'), where('email', '==', targetEmail));\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       const uid = wallet.uid;\n//       if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n//         setMessage('❌ Not your user.');\n//         return;\n//       }\n//       setTargetUid(uid);\n//       setTargetBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error searching.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Invalid amount.');\n//       return;\n//     }\n//     if (amount > currentBalance) {\n//       setMessage('❌ Insufficient balance.');\n//       return;\n//     }\n//     try {\n//       const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toWalletCol = 'subwallets';\n//       const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//       const toRef = doc(db, toWalletCol, targetUid);\n//       await updateDoc(toRef, {\n//         balance: (targetBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(fromRef, {\n//         balance: currentBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setTargetBalance((prev) => (prev ?? 0) + amount);\n//       setCurrentBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to transfer.');\n//     }\n//   };\n//   // const handleAcceptWithdraw = async (req) => {\n//   //   const amount = req.amount;\n//   //   const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//   //   const toWalletCol = 'subwallets';\n//   //   const toRef = doc(db, toWalletCol, req.fromUid);\n//   //   const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//   //   const toSnap = await getDoc(toRef);\n//   //   const fromSnap = await getDoc(fromRef);\n//   //   if (!toSnap.exists() || !fromSnap.exists()) {\n//   //     setMessage('❌ Wallet not found.');\n//   //     return;\n//   //   }\n//   //   const fromBalance = fromSnap.data().balance ?? 0;\n//   //   if (fromBalance < amount) {\n//   //     setMessage('❌ Not enough balance.');\n//   //     return;\n//   //   }\n//   //   await updateDoc(toRef, {\n//   //     balance: (toSnap.data().balance ?? 0) + amount,\n//   //   });\n//   //   await updateDoc(fromRef, {\n//   //     balance: fromBalance - amount,\n//   //   });\n//   //   await updateDoc(doc(db, 'subwithdrawRequests', req.id), {\n//   //     status: 'accepted',\n//   //     approvedAt: serverTimestamp(),\n//   //   });\n//   //   setWithdrawRequests((prev) => prev.filter((r) => r.id !== req.id));\n//   //   setMessage('✅ Withdraw accepted.');\n//   // };\n// const handleAcceptWithdraw = async (withdraw) => {\n//   try {\n//     if (!withdraw || typeof withdraw !== 'object') {\n//       console.error('❌ Invalid withdraw object:', withdraw);\n//       return alert('Invalid request.');\n//     }\n//     const { uid, amount, id, fromSubAdminId } = withdraw;\n//     if (!uid || typeof uid !== 'string') {\n//       console.error('❌ Missing or invalid UID in withdraw:', withdraw);\n//       return alert('Withdraw UID is missing.');\n//     }\n//     if (!id) {\n//       console.error('❌ Missing Firestore document ID of withdraw request');\n//       return alert('Withdraw request ID missing.');\n//     }\n//     // Define references\n//     const userWalletRef = doc(db, 'subwallets', uid); // user wallet\n//     const subAdminWalletRef = doc(db, 'subwallets', fromSubAdminId); // subadmin wallet\n//     const withdrawRef = doc(db, 'subwithdrawRequests', id);\n//     // Fetch current balances\n//     const [userSnap, subAdminSnap] = await Promise.all([\n//       getDoc(userWalletRef),\n//       getDoc(subAdminWalletRef),\n//     ]);\n//     const userBalance = userSnap.exists() ? userSnap.data()?.balance ?? 0 : 0;\n//     const subAdminBalance = subAdminSnap.exists() ? subAdminSnap.data()?.balance ?? 0 : 0;\n//     if (subAdminBalance < amount) {\n//       return alert('Subadmin has insufficient balance to approve this withdrawal.');\n//     }\n//     // ✅ Update user wallet (add funds)\n//     await updateDoc(userWalletRef, {\n//       balance: userBalance + amount,\n//       updatedAt: serverTimestamp(),\n//     });\n//     // ✅ Deduct from subadmin wallet\n//     await updateDoc(subAdminWalletRef, {\n//       balance: subAdminBalance - amount,\n//       updatedAt: serverTimestamp(),\n//     });\n//     // ✅ Update withdraw request status\n//     await updateDoc(withdrawRef, {\n//       status: 'approved',\n//       updatedAt: serverTimestamp(),\n//     });\n//     alert('✅ Withdraw approved and funds added to user wallet.');\n//   } catch (err) {\n//     console.error('❌ handleAcceptWithdraw error:', err);\n//     alert('Something went wrong while accepting the withdraw.');\n//   }\n// };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n//         <div className=\"max-w-xl mx-auto bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             {role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'}\n//           </h1>\n//           <p className=\"mb-4 text-green-400\">Your Balance: ₹{currentBalance.toFixed(2)}</p>\n//           <input\n//             type=\"email\"\n//             placeholder={role === 'admin' ? 'Subadmin Email' : 'User Email'}\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Recipient Balance: ₹{targetBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//         {/* Withdraw Requests */}\n//         {withdrawRequests.length > 0 && (\n//           <div className=\"max-w-2xl mx-auto mt-10 bg-gray-800 p-6 rounded shadow-lg\">\n//             <h2 className=\"text-xl font-semibold mb-4\">Pending Withdraw Requests</h2>\n//             {withdrawRequests.map((req) => (\n//               <div key={req.id} className=\"bg-gray-700 p-3 mb-3 rounded\">\n//                 <p><strong>From:</strong> {req.fromEmail}</p>\n//                 <p><strong>Amount:</strong> ₹{req.amount}</p>\n//                 <p><strong>Method:</strong> {req.method} ({req.details})</p>\n//                 <button\n//                   className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\"\n//                   onClick={() => handleAcceptWithdraw(req)}\n//                 >\n//                   Accept\n//                 </button>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function Page() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [targetBalance, setTargetBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [withdrawRequests, setWithdrawRequests] = useState([]);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const userRef = doc(db, 'users', user.uid);\n//         const snap = await getDoc(userRef);\n//         const userData = snap.exists() ? snap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         const balance = walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0;\n//         setCurrentBalance(balance);\n//         loadWithdrawRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const loadWithdrawRequests = async (uid, userRole) => {\n//     const field = userRole === 'admin' ? 'fromSubAdminId' : 'fromUserSubAdminId';\n//     const q = query(collection(db, 'subwithdrawRequests'), where(field, '==', uid));\n//     const snap = await getDocs(q);\n//     const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//     setWithdrawRequests(results);\n//   };\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setTargetBalance(null);\n//     try {\n//       const q = query(collection(db, 'subwallets'), where('email', '==', targetEmail));\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       const uid = wallet.uid;\n//       if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n//         setMessage('❌ Not your user.');\n//         return;\n//       }\n//       setTargetUid(uid);\n//       setTargetBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error searching.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Invalid amount.');\n//       return;\n//     }\n//     if (amount > currentBalance) {\n//       setMessage('❌ Insufficient balance.');\n//       return;\n//     }\n//     try {\n//       const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toWalletCol = 'subwallets';\n//       const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//       const toRef = doc(db, toWalletCol, targetUid);\n//       await updateDoc(toRef, {\n//         balance: (targetBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(fromRef, {\n//         balance: currentBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setTargetBalance((prev) => (prev ?? 0) + amount);\n//       setCurrentBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to transfer.');\n//     }\n//   };\n//   const handleAcceptWithdraw = async (withdraw) => {\n//     try {\n//       if (!withdraw || typeof withdraw !== 'object') {\n//         console.error('❌ Invalid withdraw object:', withdraw);\n//         return alert('Invalid request.');\n//       }\n//       const { uid, amount, id, fromSubAdminId } = withdraw;\n//       if (!uid || typeof uid !== 'string') {\n//         console.error('❌ Missing or invalid UID in withdraw:', withdraw);\n//         return alert('Withdraw UID is missing.');\n//       }\n//       if (!id) {\n//         console.error('❌ Missing Firestore document ID of withdraw request');\n//         return alert('Withdraw request ID missing.');\n//       }\n//       const userWalletRef = doc(db, 'subwallets', uid);\n//       const subAdminWalletRef = doc(db, 'subwallets', fromSubAdminId);\n//       const withdrawRef = doc(db, 'subwithdrawRequests', id);\n//       const [userSnap, subAdminSnap] = await Promise.all([\n//         getDoc(userWalletRef),\n//         getDoc(subAdminWalletRef),\n//       ]);\n//       const userBalance = userSnap.exists() ? userSnap.data()?.balance ?? 0 : 0;\n//       const subAdminBalance = subAdminSnap.exists() ? subAdminSnap.data()?.balance ?? 0 : 0;\n//       if (subAdminBalance < amount) {\n//         return alert('Subadmin has insufficient balance to approve this withdrawal.');\n//       }\n//       await updateDoc(userWalletRef, {\n//         balance: userBalance + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(subAdminWalletRef, {\n//         balance: subAdminBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(withdrawRef, {\n//         status: 'approved',\n//         updatedAt: serverTimestamp(),\n//       });\n//       setWithdrawRequests((prev) => prev.filter((r) => r.id !== id));\n//       alert('✅ Withdraw approved and funds added to user wallet.');\n//     } catch (err) {\n//       console.error('❌ handleAcceptWithdraw error:', err);\n//       alert('Something went wrong while accepting the withdraw.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n//         <div className=\"max-w-xl mx-auto bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             {role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'}\n//           </h1>\n//           <p className=\"mb-4 text-green-400\">Your Balance: ₹{currentBalance.toFixed(2)}</p>\n//           <input\n//             type=\"email\"\n//             placeholder={role === 'admin' ? 'Subadmin Email' : 'User Email'}\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Recipient Balance: ₹{targetBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//         {/* ✅ Withdraw Requests */}\n//         {withdrawRequests.length > 0 && (\n//           <div className=\"max-w-2xl mx-auto mt-10 bg-gray-800 p-6 rounded shadow-lg\">\n//             <h2 className=\"text-xl font-semibold mb-4\">Pending Withdraw Requests</h2>\n//             {withdrawRequests.map((req) => (\n//               <div key={req.id} className=\"bg-gray-700 p-3 mb-3 rounded\">\n//                 <p><strong>User:</strong> {req.email}</p>\n//                 <p><strong>Amount:</strong> ₹{req.amount}</p>\n//                 <p><strong>Method:</strong> {req.method} ({req.paymentId})</p>\n//                 <p><strong>Requested:</strong> {req.createdAt?.seconds ? new Date(req.createdAt.seconds * 1000).toLocaleString() : 'N/A'}</p>\n//                 <button\n//                   className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\"\n//                   onClick={() => handleAcceptWithdraw(req)}\n//                 >\n//                   Accept\n//                 </button>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function Page() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [targetBalance, setTargetBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [withdrawRequests, setWithdrawRequests] = useState([]);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const userRef = doc(db, 'users', user.uid);\n//         const snap = await getDoc(userRef);\n//         const userData = snap.exists() ? snap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         const balance = walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0;\n//         setCurrentBalance(balance);\n//         loadWithdrawRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   const loadWithdrawRequests = async (uid, userRole) => {\n//     const field = userRole === 'admin' ? 'fromSubAdminId' : 'fromUserSubAdminId';\n//     const q = query(collection(db, 'subwithdrawRequests'), where(field, '==', uid));\n//     const snap = await getDocs(q);\n//     const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//     setWithdrawRequests(results);\n//   };\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setTargetBalance(null);\n//     try {\n//       const q = query(collection(db, 'subwallets'), where('email', '==', targetEmail));\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       const uid = wallet.uid;\n//       if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n//         setMessage('❌ Not your user.');\n//         return;\n//       }\n//       setTargetUid(uid);\n//       setTargetBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error searching.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Invalid amount.');\n//       return;\n//     }\n//     if (amount > currentBalance) {\n//       setMessage('❌ Insufficient balance.');\n//       return;\n//     }\n//     try {\n//       const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toWalletCol = 'subwallets';\n//       const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//       const toRef = doc(db, toWalletCol, targetUid);\n//       await updateDoc(toRef, {\n//         balance: (targetBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(fromRef, {\n//         balance: currentBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setTargetBalance((prev) => (prev ?? 0) + amount);\n//       setCurrentBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to transfer.');\n//     }\n//   };\n//   const handleAcceptWithdraw = async (withdraw) => {\n//     try {\n//       if (!withdraw || typeof withdraw !== 'object') return alert('Invalid request.');\n//       const { uid, amount, id, fromSubAdminId } = withdraw;\n//       if (!uid || !id || !fromSubAdminId) return alert('Missing data in request.');\n//       const userWalletRef = doc(db, 'subwallets', uid);\n//       const subAdminWalletRef = doc(db, 'subwallets', fromSubAdminId);\n//       const withdrawRef = doc(db, 'subwithdrawRequests', id);\n//       const [userSnap, subAdminSnap] = await Promise.all([\n//         getDoc(userWalletRef),\n//         getDoc(subAdminWalletRef),\n//       ]);\n//       const userBalance = userSnap.exists() ? userSnap.data()?.balance ?? 0 : 0;\n//       const subAdminBalance = subAdminSnap.exists() ? subAdminSnap.data()?.balance ?? 0 : 0;\n//       if (subAdminBalance < amount) return alert('Insufficient subadmin balance.');\n//       await updateDoc(userWalletRef, {\n//         balance: userBalance + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(subAdminWalletRef, {\n//         balance: subAdminBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(withdrawRef, {\n//         status: 'approved',\n//         updatedAt: serverTimestamp(),\n//       });\n//       setWithdrawRequests((prev) => prev.filter((r) => r.id !== id));\n//       alert('✅ Withdraw approved.');\n//     } catch (err) {\n//       console.error('❌ Withdraw approval error:', err);\n//       alert('Something went wrong.');\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n//         <div className=\"max-w-xl mx-auto bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             {role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'}\n//           </h1>\n//           <p className=\"mb-4 text-green-400\">Your Balance: ₹{currentBalance.toFixed(2)}</p>\n//           <input\n//             type=\"email\"\n//             placeholder={role === 'admin' ? 'Subadmin Email' : 'User Email'}\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Recipient Balance: ₹{targetBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//         {withdrawRequests.length > 0 && (\n//           <div className=\"max-w-2xl mx-auto mt-10 bg-gray-800 p-6 rounded shadow-lg\">\n//             <h2 className=\"text-xl font-semibold mb-4\">Pending Withdraw Requests</h2>\n//             {withdrawRequests.map((req) => (\n//               <div key={req.id} className=\"bg-gray-700 p-3 mb-3 rounded\">\n//                 <p><strong>User:</strong> {req.email}</p>\n//                 <p><strong>Amount:</strong> ₹{req.amount}</p>\n//                 <p><strong>Method:</strong> {req.method} ({req.paymentId})</p>\n//                 <p><strong>Time:</strong> {req.createdAt?.seconds ? new Date(req.createdAt.seconds * 1000).toLocaleString() : 'N/A'}</p>\n//                 <button\n//                   className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\"\n//                   onClick={() => handleAcceptWithdraw(req)}\n//                 >\n//                   Accept\n//                 </button>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//     </Layout>\n//   );\n// }\n// 'use client';\n// import React, { useState, useEffect } from 'react';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth';\n// import {\n//   getFirestore,\n//   collection,\n//   query,\n//   where,\n//   getDocs,\n//   doc,\n//   getDoc,\n//   updateDoc,\n//   serverTimestamp,\n// } from 'firebase/firestore';\n// import firebaseApp from '@/firebase';\n// import Layout from '@/app/Components/Layout';\n// export default function Page() {\n//   const auth = getAuth(firebaseApp);\n//   const db = getFirestore(firebaseApp);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [role, setRole] = useState(null);\n//   const [currentBalance, setCurrentBalance] = useState(0);\n//   const [targetEmail, setTargetEmail] = useState('');\n//   const [targetUid, setTargetUid] = useState('');\n//   const [targetBalance, setTargetBalance] = useState(null);\n//   const [amountToAdd, setAmountToAdd] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [withdrawRequests, setWithdrawRequests] = useState([]);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, async (user) => {\n//       setCurrentUser(user);\n//       if (user) {\n//         const userRef = doc(db, 'users', user.uid);\n//         const snap = await getDoc(userRef);\n//         const userData = snap.exists() ? snap.data() : {};\n//         const userRole = userData.role || 'user';\n//         setRole(userRole);\n//         const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n//         const walletRef = doc(db, walletCol, user.uid);\n//         const walletSnap = await getDoc(walletRef);\n//         const balance = walletSnap.exists() ? walletSnap.data().balance ?? 0 : 0;\n//         setCurrentBalance(balance);\n//         loadWithdrawRequests(user.uid);\n//         // loadWithdrawRequests(user.uid, userRole);\n//       }\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   // const loadWithdrawRequests = async (uid) => {\n//   //   const q = query(collection(db, 'subwithdrawRequests'), where('fromSubAdminId', '==', uid));\n//   //   const snap = await getDocs(q);\n//   //   const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//   //   setWithdrawRequests(results);\n//   // };\n//   const loadWithdrawRequests = async (uid, role) => {\n//   let q;\n//   if (role === 'admin') {\n//     // Admin sees withdraws requested by subadmins\n//     q = query(collection(db, 'subwithdrawRequests'), where('fromSubAdminId', '==', uid));\n//   } else if (role === 'subadmin') {\n//     // Subadmin sees withdraws requested by their users\n//     q = query(collection(db, 'subwithdrawRequests'), where('fromUserSubAdminId', '==', uid));\n//   } else {\n//     return; // Do nothing for normal users\n//   }\n//   const snap = await getDocs(q);\n//   const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n//   setWithdrawRequests(results);\n// };\n// // const loadWithdrawRequests = async (uid, userRole) => {\n// //   let q;\n// //   if (userRole === 'admin') {\n// //     // Admin should see withdraws made by subadmins\n// //     q = query(\n// //       collection(db, 'subwithdrawRequests'),\n// //       where('fromSubAdminId', '==', uid),\n// //       where('status', '==', 'pending')\n// //     );\n// //   } else if (userRole === 'subadmin') {\n// //     // Subadmin should see withdraws made by their users\n// //     q = query(\n// //       collection(db, 'subwithdrawRequests'),\n// //       where('fromUserSubAdminId', '==', uid),\n// //       where('status', '==', 'pending')\n// //     );\n// //   } else {\n// //     return; // No access for other roles\n// //   }\n// //   const snap = await getDocs(q);\n// //   const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n// //   setWithdrawRequests(results);\n// // };\n//   const handleSearch = async () => {\n//     setLoading(true);\n//     setMessage('');\n//     setTargetUid('');\n//     setTargetBalance(null);\n//     try {\n//       const q = query(collection(db, 'subwallets'), where('email', '==', targetEmail));\n//       const snap = await getDocs(q);\n//       if (snap.empty) {\n//         setMessage('❌ Wallet not found.');\n//         return;\n//       }\n//       const wallet = snap.docs[0].data();\n//       const uid = wallet.uid;\n//       if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n//         setMessage('❌ Not your user.');\n//         return;\n//       }\n//       setTargetUid(uid);\n//       setTargetBalance(wallet.balance ?? 0);\n//       setMessage('✅ Wallet found.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Error searching.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleAddBalance = async () => {\n//     if (!targetUid || !amountToAdd) return;\n//     const amount = parseFloat(amountToAdd);\n//     if (isNaN(amount) || amount <= 0) {\n//       setMessage('❌ Invalid amount.');\n//       return;\n//     }\n//     if (amount > currentBalance) {\n//       setMessage('❌ Insufficient balance.');\n//       return;\n//     }\n//     try {\n//       const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n//       const toWalletCol = 'subwallets';\n//       const fromRef = doc(db, fromWalletCol, currentUser.uid);\n//       const toRef = doc(db, toWalletCol, targetUid);\n//       await updateDoc(toRef, {\n//         balance: (targetBalance ?? 0) + amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       await updateDoc(fromRef, {\n//         balance: currentBalance - amount,\n//         updatedAt: serverTimestamp(),\n//       });\n//       setTargetBalance((prev) => (prev ?? 0) + amount);\n//       setCurrentBalance((prev) => prev - amount);\n//       setAmountToAdd('');\n//       setMessage('✅ Transfer successful.');\n//     } catch (err) {\n//       console.error(err);\n//       setMessage('❌ Failed to transfer.');\n//     }\n//   };\n//   // const handleAcceptWithdraw = async (withdraw) => {\n//   //   try {\n//   //     const { uid, amount, id, fromSubAdminId } = withdraw;\n//   //     if (!uid || !id || !fromSubAdminId) {\n//   //       return alert('Invalid withdraw request.');\n//   //     }\n//   //     const userWalletRef = doc(db, 'subwallets', uid);\n//   //     const subAdminWalletRef = doc(db, 'subwallets', fromSubAdminId);\n//   //     const withdrawRef = doc(db, 'subwithdrawRequests', id);\n//   //     const [userSnap, subAdminSnap] = await Promise.all([\n//   //       getDoc(userWalletRef),\n//   //       getDoc(subAdminWalletRef),\n//   //     ]);\n//   //     const userBalance = userSnap.exists() ? userSnap.data().balance ?? 0 : 0;\n//   //     const subAdminBalance = subAdminSnap.exists() ? subAdminSnap.data().balance ?? 0 : 0;\n//   //     if (subAdminBalance < amount) {\n//   //       return alert('Subadmin has insufficient balance to approve this withdrawal.');\n//   //     }\n//   //     await updateDoc(userWalletRef, {\n//   //       balance: userBalance + amount,\n//   //       updatedAt: serverTimestamp(),\n//   //     });\n//   //     await updateDoc(subAdminWalletRef, {\n//   //       balance: subAdminBalance - amount,\n//   //       updatedAt: serverTimestamp(),\n//   //     });\n//   //     await updateDoc(withdrawRef, {\n//   //       status: 'approved',\n//   //       updatedAt: serverTimestamp(),\n//   //     });\n//   //     setWithdrawRequests((prev) => prev.filter((r) => r.id !== id));\n//   //     alert('✅ Withdraw approved and funds added to user wallet.');\n//   //   } catch (err) {\n//   //     console.error('❌ handleAcceptWithdraw error:', err);\n//   //     alert('Something went wrong while accepting the withdraw.');\n//   //   }\n//   // };\n//   const handleAcceptWithdraw = async (withdraw) => {\n//   try {\n//     const { id, amount, fromSubAdminId, status } = withdraw;\n//     if (!id || !fromSubAdminId || status !== 'pending') {\n//       return alert('Invalid or already processed request.');\n//     }\n//     // Get subadmin wallet\n//     const subAdminWalletRef = doc(db, 'subwallets', fromSubAdminId);\n//     const subAdminSnap = await getDoc(subAdminWalletRef);\n//     if (!subAdminSnap.exists()) return alert('Subadmin wallet not found.');\n//     const subAdminBalance = subAdminSnap.data().balance ?? 0;\n//     // ✅ Add amount back to subadmin\n//     await updateDoc(subAdminWalletRef, {\n//       balance: subAdminBalance + amount,\n//       updatedAt: serverTimestamp(),\n//     });\n//     // ✅ Mark the request as approved\n//     await updateDoc(doc(db, 'subwithdrawRequests', id), {\n//       status: 'approved',\n//       approvedAt: serverTimestamp(),\n//     });\n//     // ✅ Remove from pending list on screen\n//     setWithdrawRequests((prev) =>\n//       prev.map((r) =>\n//         r.id === id ? { ...r, status: 'approved' } : r\n//       )\n//     );\n//     alert('✅ Withdraw approved. Amount credited back to subadmin.');\n//   } catch (err) {\n//     console.error('❌ Error approving withdraw:', err);\n//     alert('Something went wrong.');\n//   }\n// };\n//   return (\n//     <Layout>\n//       <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n//         <div className=\"max-w-xl mx-auto bg-gray-800 p-6 rounded shadow-lg\">\n//           <h1 className=\"text-2xl font-bold mb-6 text-center\">\n//             {role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'}\n//           </h1>\n//           <p className=\"mb-4 text-green-400\">Your Balance: ₹{currentBalance.toFixed(2)}</p>\n//           <input\n//             type=\"email\"\n//             placeholder={role === 'admin' ? 'Subadmin Email' : 'User Email'}\n//             className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//             value={targetEmail}\n//             onChange={(e) => setTargetEmail(e.target.value)}\n//           />\n//           <button\n//             onClick={handleSearch}\n//             disabled={loading}\n//             className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\"\n//           >\n//             {loading ? 'Searching...' : 'Find Wallet'}\n//           </button>\n//           {message && <p className=\"text-center text-sm mb-4 text-yellow-400\">{message}</p>}\n//           {targetUid && (\n//             <>\n//               <p className=\"mb-2\">Recipient Balance: ₹{targetBalance?.toFixed(2)}</p>\n//               <input\n//                 type=\"number\"\n//                 placeholder=\"Amount to transfer\"\n//                 className=\"w-full p-3 rounded bg-gray-700 text-white mb-4\"\n//                 value={amountToAdd}\n//                 onChange={(e) => setAmountToAdd(e.target.value)}\n//               />\n//               <button\n//                 onClick={handleAddBalance}\n//                 className=\"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\"\n//               >\n//                 Transfer Funds\n//               </button>\n//             </>\n//           )}\n//         </div>\n//         {/* Withdraw Requests */}\n//         {withdrawRequests.length > 0 && (\n//           <div className=\"max-w-2xl mx-auto mt-10 bg-gray-800 p-6 rounded shadow-lg\">\n//             <h2 className=\"text-xl font-semibold mb-4\">Pending Withdraw Requests</h2>\n//             {withdrawRequests.map((req) => (\n//               <div key={req.id} className=\"bg-gray-700 p-3 mb-3 rounded\">\n//                 <p><strong>User Email:</strong> {req.email}</p>\n//                 <p><strong>Amount:</strong> ₹{req.amount}</p>\n//                 <p><strong>Method:</strong> {req.method} ({req.paymentId})</p>\n//                 {/* <button\n//                   className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\"\n//                   onClick={() => handleAcceptWithdraw(req)}\n//                 >\n//                   Accept\n//                 </button> */}\n//                 {req.status === 'pending' ? (\n//   <button\n//     className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\"\n//     onClick={() => handleAcceptWithdraw(req)}\n//   >\n//     Accept\n//   </button>\n// ) : (\n//   <span className=\"inline-block mt-2 text-green-400 font-semibold\">\n//     Approved\n//   </span>\n// )}\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//     </Layout>\n//   );\n// }\n// app/yourPath/page.js\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction Page() {\n    _s();\n    const auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.getAuth)(_firebase__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n    const db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getFirestore)(_firebase__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [role, setRole] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentBalance, setCurrentBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [targetEmail, setTargetEmail] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [targetUid, setTargetUid] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [targetBalance, setTargetBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [amountToAdd, setAmountToAdd] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [message, setMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [withdrawRequests, setWithdrawRequests] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Page.useEffect\": ()=>{\n            const unsubscribe = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.onAuthStateChanged)(auth, {\n                \"Page.useEffect.unsubscribe\": async (user)=>{\n                    setCurrentUser(user);\n                    if (user) {\n                        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, 'users', user.uid);\n                        const snap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(userRef);\n                        const userData = snap.exists() ? snap.data() : {};\n                        const userRole = userData.role || 'user';\n                        setRole(userRole);\n                        const walletCol = userRole === 'admin' ? 'adminwallets' : 'subwallets';\n                        const walletRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, walletCol, user.uid);\n                        const walletSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(walletRef);\n                        var _walletSnap_data_balance;\n                        const balance = walletSnap.exists() ? (_walletSnap_data_balance = walletSnap.data().balance) !== null && _walletSnap_data_balance !== void 0 ? _walletSnap_data_balance : 0 : 0;\n                        setCurrentBalance(balance);\n                        loadWithdrawRequests(user.uid, userRole);\n                    }\n                }\n            }[\"Page.useEffect.unsubscribe\"]);\n            return ({\n                \"Page.useEffect\": ()=>unsubscribe()\n            })[\"Page.useEffect\"];\n        }\n    }[\"Page.useEffect\"], []);\n    // const loadWithdrawRequests = async (uid, userRole) => {\n    //   let q;\n    //   if (userRole === 'admin') {\n    //     q = query(\n    //       collection(db, 'subwithdrawRequests'),\n    //       where('fromSubAdminId', '==', uid),\n    //       where('status', '==', 'pending')\n    //     );\n    //   } else if (userRole === 'subadmin') {\n    //     q = query(\n    //       collection(db, 'subwithdrawRequests'),\n    //       where('fromUserSubAdminId', '==', uid),\n    //       where('status', '==', 'pending')\n    //     );\n    //   } else return;\n    //   const snap = await getDocs(q);\n    //   const results = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n    //   setWithdrawRequests(results);\n    // };\n    const loadWithdrawRequests = async (uid, userRole)=>{\n        let q;\n        if (userRole === 'admin') {\n            // Show only subadmin → admin withdraws\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'subwithdrawRequests'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)('fromUserSubAdminId', '==', ''), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)('status', '==', 'pending'));\n        } else if (userRole === 'subadmin') {\n            // Show user → subadmin withdraws\n            q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'subwithdrawRequests'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)('fromUserSubAdminId', '==', uid), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)('status', '==', 'pending'));\n        } else {\n            return;\n        }\n        const snap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n        const results = snap.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n        setWithdrawRequests(results);\n    };\n    const handleSearch = async ()=>{\n        setLoading(true);\n        setMessage('');\n        setTargetUid('');\n        setTargetBalance(null);\n        try {\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'subwallets'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)('email', '==', targetEmail));\n            const snap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n            if (snap.empty) return setMessage('❌ Wallet not found.');\n            const wallet = snap.docs[0].data();\n            const uid = wallet.uid;\n            if (role === 'subadmin' && wallet.subAdminId !== currentUser.uid) {\n                return setMessage('❌ Not your user.');\n            }\n            setTargetUid(uid);\n            var _wallet_balance;\n            setTargetBalance((_wallet_balance = wallet.balance) !== null && _wallet_balance !== void 0 ? _wallet_balance : 0);\n            setMessage('✅ Wallet found.');\n        } catch (err) {\n            console.error(err);\n            setMessage('❌ Error searching.');\n        } finally{\n            setLoading(false);\n        }\n    };\n    // const handleAddBalance = async () => {\n    //   if (!targetUid || !amountToAdd) return;\n    //   const amount = parseFloat(amountToAdd);\n    //   if (isNaN(amount) || amount <= 0) return setMessage('❌ Invalid amount.');\n    //   if (amount > currentBalance) return setMessage('❌ Insufficient balance.');\n    //   try {\n    //     const fromWalletCol = role === 'admin' ? 'adminwallets' : 'subwallets';\n    //     const toWalletCol = 'subwallets';\n    //     const fromRef = doc(db, fromWalletCol, currentUser.uid);\n    //     const toRef = doc(db, toWalletCol, targetUid);\n    //     await updateDoc(toRef, {\n    //       balance: (targetBalance ?? 0) + amount,\n    //       updatedAt: serverTimestamp(),\n    //     });\n    //     await updateDoc(fromRef, {\n    //       balance: currentBalance - amount,\n    //       updatedAt: serverTimestamp(),\n    //     });\n    //     setTargetBalance((prev) => (prev ?? 0) + amount);\n    //     setCurrentBalance((prev) => prev - amount);\n    //     setAmountToAdd('');\n    //     setMessage('✅ Transfer successful.');\n    //   } catch (err) {\n    //     console.error(err);\n    //     setMessage('❌ Failed to transfer.');\n    //   }\n    // };\n    // const handleAcceptWithdraw = async (withdraw) => {\n    //   try {\n    //     const { id, amount, fromSubAdminId, fromUserSubAdminId, uid, status } = withdraw;\n    //     if (!id || status !== 'pending') return alert('Invalid request.');\n    //     if (role === 'admin') {\n    //       const subAdminRef = doc(db, 'subwallets', fromSubAdminId);\n    //       const snap = await getDoc(subAdminRef);\n    //       const bal = snap.data().balance ?? 0;\n    //       await updateDoc(subAdminRef, {\n    //         balance: bal + amount,\n    //         updatedAt: serverTimestamp(),\n    //       });\n    //     }\n    //     if (role === 'subadmin') {\n    //       const userRef = doc(db, 'subwallets', uid);\n    //       const subRef = doc(db, 'subwallets', fromUserSubAdminId);\n    //       const [userSnap, subSnap] = await Promise.all([getDoc(userRef), getDoc(subRef)]);\n    //       const userBal = userSnap.data().balance ?? 0;\n    //       const subBal = subSnap.data().balance ?? 0;\n    //       if (subBal < amount) return alert('❌ Insufficient balance.');\n    //       await updateDoc(userRef, {\n    //         balance: userBal + amount,\n    //         updatedAt: serverTimestamp(),\n    //       });\n    //       await updateDoc(subRef, {\n    //         balance: subBal - amount,\n    //         updatedAt: serverTimestamp(),\n    //       });\n    //     }\n    //     await updateDoc(doc(db, 'subwithdrawRequests', id), {\n    //       status: 'approved',\n    //       approvedAt: serverTimestamp(),\n    //     });\n    //     setWithdrawRequests((prev) => prev.map((r) => r.id === id ? { ...r, status: 'approved' } : r));\n    //     alert('✅ Withdraw approved.');\n    //   } catch (err) {\n    //     console.error('❌ Error approving withdraw:', err);\n    //     alert('Something went wrong.');\n    //   }\n    // };\n    // const handleAcceptWithdraw = async (withdraw) => {\n    //   try {\n    //     const { id, amount, fromSubAdminId, fromUserSubAdminId, status } = withdraw;\n    //     if (!id || status !== 'pending') {\n    //       return alert('Invalid or already processed request.');\n    //     }\n    //     // Determine if admin is accepting a subadmin's request\n    //     const isAdmin = role === 'admin' && fromSubAdminId && !fromUserSubAdminId;\n    //     const payerWalletRef = doc(db, isAdmin ? 'adminwallets' : 'subwallets', currentUser.uid);\n    //     const receiverWalletRef = doc(db, 'subwallets', withdraw.uid); // Always add to requester wallet\n    //     const [payerSnap, receiverSnap] = await Promise.all([\n    //       getDoc(payerWalletRef),\n    //       getDoc(receiverWalletRef),\n    //     ]);\n    //     const payerBalance = payerSnap.exists() ? payerSnap.data().balance ?? 0 : 0;\n    //     const receiverBalance = receiverSnap.exists() ? receiverSnap.data().balance ?? 0 : 0;\n    //     if (payerBalance < amount) {\n    //       return alert('❌ Insufficient balance to approve.');\n    //     }\n    //     // Transfer amount\n    //     await updateDoc(receiverWalletRef, {\n    //       balance: receiverBalance + amount,\n    //       updatedAt: serverTimestamp(),\n    //     });\n    //     await updateDoc(payerWalletRef, {\n    //       balance: payerBalance - amount,\n    //       updatedAt: serverTimestamp(),\n    //     });\n    //     // Mark as approved\n    //     await updateDoc(doc(db, 'subwithdrawRequests', id), {\n    //       status: 'approved',\n    //       approvedAt: serverTimestamp(),\n    //     });\n    //     // Update local state\n    //     setWithdrawRequests((prev) =>\n    //       prev.map((r) =>\n    //         r.id === id ? { ...r, status: 'approved' } : r\n    //       )\n    //     );\n    //     alert('✅ Withdraw approved and funds transferred.');\n    //   } catch (err) {\n    //     console.error('❌ Error approving withdraw:', err);\n    //     alert('Something went wrong.');\n    //   }\n    // };\n    const handleAcceptWithdraw = async (withdraw)=>{\n        try {\n            const { id, amount, fromSubAdminId, fromUserSubAdminId, uid, status } = withdraw;\n            if (!id || status !== 'pending') {\n                return alert('Invalid or already processed request.');\n            }\n            // Determine the receiver (who gets the money back)\n            let receiverUid;\n            if (role === 'admin') {\n                // Admin is approving subadmin → admin request\n                receiverUid = fromSubAdminId;\n            } else if (role === 'subadmin') {\n                // Subadmin is approving user → subadmin request\n                receiverUid = currentUser.uid;\n            } else {\n                return alert('Unauthorized');\n            }\n            // Approver's wallet (who gets money added back)\n            const receiverWalletRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, role === 'admin' ? 'adminwallets' : 'subwallets', receiverUid);\n            const receiverSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(receiverWalletRef);\n            var _receiverSnap_data_balance;\n            const receiverBalance = receiverSnap.exists() ? (_receiverSnap_data_balance = receiverSnap.data().balance) !== null && _receiverSnap_data_balance !== void 0 ? _receiverSnap_data_balance : 0 : 0;\n            // Add amount back to approver (admin or subadmin)\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(receiverWalletRef, {\n                balance: receiverBalance + amount,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)()\n            });\n            // await setDoc(receiverWalletRef, {\n            //   balance: receiverBalance + amount,\n            //   updatedAt: serverTimestamp(),\n            // }, { merge: true });\n            // Mark the request as approved\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, 'subwithdrawRequests', id), {\n                status: 'approved',\n                approvedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.serverTimestamp)()\n            });\n            // Update UI\n            setWithdrawRequests((prev)=>prev.map((r)=>r.id === id ? {\n                        ...r,\n                        status: 'approved'\n                    } : r));\n            alert('✅ Withdraw approved and funds added to your wallet.');\n        } catch (err) {\n            console.error('❌ Error approving withdraw:', err);\n            alert('Something went wrong.');\n        }\n    };\n    // const handleAcceptWithdraw = async (withdraw) => {\n    //   try {\n    //     const { id, amount, fromSubAdminId, fromUserSubAdminId, uid, status } = withdraw;\n    //     if (!id || status !== 'pending') {\n    //       return alert('Invalid or already processed request.');\n    //     }\n    //     let receiverWalletRef;\n    //     if (role === 'admin' && fromSubAdminId && !fromUserSubAdminId) {\n    //       // Admin is approving subadmin's withdraw request\n    //       receiverWalletRef = doc(db, 'adminwallets', uid); // subadmin’s uid is the requester\n    //     } else if (role === 'subadmin' && fromUserSubAdminId) {\n    //       // Subadmin is approving user's withdraw request\n    //       receiverWalletRef = doc(db, 'subwallets', uid); // user’s uid is the requester\n    //     } else {\n    //       return alert('Unauthorized or malformed withdraw request.');\n    //     }\n    //     const receiverSnap = await getDoc(receiverWalletRef);\n    //     const receiverBalance = receiverSnap.exists() ? receiverSnap.data().balance ?? 0 : 0;\n    //     // ✅ Credit receiver wallet\n    //     await setDoc(receiverWalletRef, {\n    //       balance: receiverBalance + amount,\n    //       updatedAt: serverTimestamp(),\n    //     }, { merge: true });\n    //     // ✅ Mark request as approved\n    //     await updateDoc(doc(db, 'subwithdrawRequests', id), {\n    //       status: 'approved',\n    //       approvedAt: serverTimestamp(),\n    //     });\n    //     // ✅ Update state\n    //     setWithdrawRequests((prev) =>\n    //       prev.map((r) =>\n    //         r.id === id ? { ...r, status: 'approved' } : r\n    //       )\n    //     );\n    //     alert('✅ Withdraw approved and amount credited.');\n    //   } catch (err) {\n    //     console.error('❌ Error approving withdraw:', err);\n    //     alert('Something went wrong while approving.');\n    //   }\n    // };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_app_Components_Layout__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen bg-gray-900 text-white p-8\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-xl mx-auto bg-gray-800 p-6 rounded shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-2xl font-bold mb-6 text-center\",\n                            children: role === 'admin' ? 'Admin: Fund Subadmin' : 'Subadmin: Fund User'\n                        }, void 0, false, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3155,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"mb-4 text-green-400\",\n                            children: [\n                                \"Your Balance: ₹\",\n                                currentBalance.toFixed(2)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3159,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"email\",\n                            placeholder: role === 'admin' ? 'Subadmin Email' : 'User Email',\n                            className: \"w-full p-3 rounded bg-gray-700 text-white mb-4\",\n                            value: targetEmail,\n                            onChange: (e)=>setTargetEmail(e.target.value)\n                        }, void 0, false, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3161,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: handleSearch,\n                            disabled: loading,\n                            className: \"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 rounded mb-4\",\n                            children: loading ? 'Searching...' : 'Find Wallet'\n                        }, void 0, false, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3169,\n                            columnNumber: 11\n                        }, this),\n                        message && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-center text-sm mb-4 text-yellow-400\",\n                            children: message\n                        }, void 0, false, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3177,\n                            columnNumber: 23\n                        }, this),\n                        targetUid && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"mb-2\",\n                                    children: [\n                                        \"Recipient Balance: ₹\",\n                                        targetBalance === null || targetBalance === void 0 ? void 0 : targetBalance.toFixed(2)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                    lineNumber: 3181,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    type: \"number\",\n                                    placeholder: \"Amount to transfer\",\n                                    className: \"w-full p-3 rounded bg-gray-700 text-white mb-4\",\n                                    value: amountToAdd,\n                                    onChange: (e)=>setAmountToAdd(e.target.value)\n                                }, void 0, false, {\n                                    fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                    lineNumber: 3182,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handleAddBalance,\n                                    className: \"w-full bg-green-500 hover:bg-green-600 text-black font-semibold py-2 rounded\",\n                                    children: \"Transfer Funds\"\n                                }, void 0, false, {\n                                    fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                    lineNumber: 3189,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true)\n                    ]\n                }, void 0, true, {\n                    fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                    lineNumber: 3154,\n                    columnNumber: 9\n                }, this),\n                withdrawRequests.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-2xl mx-auto mt-10 bg-gray-800 p-6 rounded shadow-lg\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-xl font-semibold mb-4\",\n                            children: \"Pending Withdraw Requests\"\n                        }, void 0, false, {\n                            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                            lineNumber: 3201,\n                            columnNumber: 13\n                        }, this),\n                        withdrawRequests.map((req)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"bg-gray-700 p-3 mb-3 rounded\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                children: \"User Email:\"\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                                lineNumber: 3204,\n                                                columnNumber: 20\n                                            }, this),\n                                            \" \",\n                                            req.email\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                        lineNumber: 3204,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                children: \"Amount:\"\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                                lineNumber: 3205,\n                                                columnNumber: 20\n                                            }, this),\n                                            \" ₹\",\n                                            req.amount\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                        lineNumber: 3205,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                children: \"Method:\"\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                                lineNumber: 3206,\n                                                columnNumber: 20\n                                            }, this),\n                                            \" \",\n                                            req.method,\n                                            \" (\",\n                                            req.paymentId,\n                                            \")\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                        lineNumber: 3206,\n                                        columnNumber: 17\n                                    }, this),\n                                    req.status === 'pending' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"mt-2 bg-blue-500 hover:bg-blue-600 text-white py-1 px-4 rounded\",\n                                        onClick: ()=>handleAcceptWithdraw(req),\n                                        children: \"Accept\"\n                                    }, void 0, false, {\n                                        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                        lineNumber: 3208,\n                                        columnNumber: 19\n                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"inline-block mt-2 text-green-400 font-semibold\",\n                                        children: \"Approved\"\n                                    }, void 0, false, {\n                                        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                        lineNumber: 3215,\n                                        columnNumber: 19\n                                    }, this)\n                                ]\n                            }, req.id, true, {\n                                fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                                lineNumber: 3203,\n                                columnNumber: 15\n                            }, this))\n                    ]\n                }, void 0, true, {\n                    fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n                    lineNumber: 3200,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n            lineNumber: 3153,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"E:\\\\Nagaland\\\\gamling\\\\megaend-new\\\\src\\\\app\\\\app\\\\admin\\\\wallet\\\\page.js\",\n        lineNumber: 3152,\n        columnNumber: 5\n    }, this);\n}\n_s(Page, \"XYTg345C/STqlgOQub0xaptNRMI=\");\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/app/admin/wallet/page.js\n"));

/***/ })

});